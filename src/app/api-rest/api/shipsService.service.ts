/**
 * ALFA API
 * ALFA API
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }from '@angular/common/http';
//import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

import {Ship} from './../model/ship';
import { ResponseListShip } from '../model/responseListShip';

import { environment } from '../../../environments/environment';

@Injectable()
export class ShipsService {

    protected basePathShips = environment.API_SHIPS;
    protected basePathImgShips = environment.API_IMAGES;

    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePathShips = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePathShips = basePath || configuration.basePath || this.basePathShips;
        }
    }

 
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


        public getShips(page:number, observe?: 'body', reportProgress?: boolean): Observable<ResponseListShip>;
        public getShips(page:number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseListShip>>;
        public getShips(page:number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseListShip>>;
        public getShips(page:number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {        
        if (page === null || page === undefined) {
            throw new Error('Parámetro requerido page');
        }
       
        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        /* return this.httpClient.get<LocalidadesListaOptions>(`${this.basePath}/localidades/v1/options/${encodeURIComponent(String(provinciaId))}/${encodeURIComponent(String(municipioId))}`,
        {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        }
    ); */
        return this.httpClient.get<ResponseListShip>(`${this.basePathShips}/starships/?page=${page}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    public getImageShip(shipId:string, observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public getImageShip(shipId:string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public getImageShip(shipId:string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public getImageShip(shipId:string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {        
    if (shipId === null || shipId === undefined) {
        throw new Error('Parámetro requerido page');
    }
   
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
        'application/json'
    ];
    let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
        headers = headers.set("Accept", httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    let consumes: string[] = [
        'application/json'
    ];
    /* return this.httpClient.get<LocalidadesListaOptions>(`${this.basePath}/localidades/v1/options/${encodeURIComponent(String(provinciaId))}/${encodeURIComponent(String(municipioId))}`,
    {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
    }
); */
    return this.httpClient.get<Blob>(`${this.basePathImgShips}/${shipId}`,
        {
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            responseType: 'blob' as 'json',
            reportProgress: reportProgress
        }
    );
}

}
